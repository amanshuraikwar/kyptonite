// Generated by Dagger (https://dagger.dev).
package io.github.amanshuraikwar.kryptonite.ui;

import dagger.internal.Factory;
import io.github.amanshuraikwar.kryptonite.data.domain.currency.GetExchangeRatesUseCase;
import io.github.amanshuraikwar.kryptonite.data.domain.currency.GetSupportedCurrenciesUseCase;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<GetSupportedCurrenciesUseCase> getSupportedCurrenciesUseCaseProvider;

  private final Provider<GetExchangeRatesUseCase> getExchangeRatesUseCaseProvider;

  public MainViewModel_Factory(
      Provider<GetSupportedCurrenciesUseCase> getSupportedCurrenciesUseCaseProvider,
      Provider<GetExchangeRatesUseCase> getExchangeRatesUseCaseProvider) {
    this.getSupportedCurrenciesUseCaseProvider = getSupportedCurrenciesUseCaseProvider;
    this.getExchangeRatesUseCaseProvider = getExchangeRatesUseCaseProvider;
  }

  @Override
  public MainViewModel get() {
    return new MainViewModel(getSupportedCurrenciesUseCaseProvider.get(), getExchangeRatesUseCaseProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<GetSupportedCurrenciesUseCase> getSupportedCurrenciesUseCaseProvider,
      Provider<GetExchangeRatesUseCase> getExchangeRatesUseCaseProvider) {
    return new MainViewModel_Factory(getSupportedCurrenciesUseCaseProvider, getExchangeRatesUseCaseProvider);
  }

  public static MainViewModel newInstance(
      GetSupportedCurrenciesUseCase getSupportedCurrenciesUseCase,
      GetExchangeRatesUseCase getExchangeRatesUseCase) {
    return new MainViewModel(getSupportedCurrenciesUseCase, getExchangeRatesUseCase);
  }
}
