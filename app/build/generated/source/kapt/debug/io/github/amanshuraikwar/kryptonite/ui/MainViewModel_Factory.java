// Generated by Dagger (https://dagger.dev).
package io.github.amanshuraikwar.kryptonite.ui;

import dagger.internal.Factory;
import io.github.amanshuraikwar.kryptonite.data.domain.currency.GetAvailableCurrenciesUseCase;
import io.github.amanshuraikwar.kryptonite.data.domain.currency.GetExchangeRatesUseCase;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<GetAvailableCurrenciesUseCase> getAvailableCurrenciesUseCaseProvider;

  private final Provider<GetExchangeRatesUseCase> getExchangeRatesUseCaseProvider;

  public MainViewModel_Factory(
      Provider<GetAvailableCurrenciesUseCase> getAvailableCurrenciesUseCaseProvider,
      Provider<GetExchangeRatesUseCase> getExchangeRatesUseCaseProvider) {
    this.getAvailableCurrenciesUseCaseProvider = getAvailableCurrenciesUseCaseProvider;
    this.getExchangeRatesUseCaseProvider = getExchangeRatesUseCaseProvider;
  }

  @Override
  public MainViewModel get() {
    return new MainViewModel(getAvailableCurrenciesUseCaseProvider.get(), getExchangeRatesUseCaseProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<GetAvailableCurrenciesUseCase> getAvailableCurrenciesUseCaseProvider,
      Provider<GetExchangeRatesUseCase> getExchangeRatesUseCaseProvider) {
    return new MainViewModel_Factory(getAvailableCurrenciesUseCaseProvider, getExchangeRatesUseCaseProvider);
  }

  public static MainViewModel newInstance(
      GetAvailableCurrenciesUseCase getAvailableCurrenciesUseCase,
      GetExchangeRatesUseCase getExchangeRatesUseCase) {
    return new MainViewModel(getAvailableCurrenciesUseCase, getExchangeRatesUseCase);
  }
}
