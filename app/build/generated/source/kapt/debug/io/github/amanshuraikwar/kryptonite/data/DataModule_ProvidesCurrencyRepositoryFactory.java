// Generated by Dagger (https://dagger.dev).
package io.github.amanshuraikwar.kryptonite.data;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.github.amanshuraikwar.kryptonite.data.db.AppDatabase;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvidesCurrencyRepositoryFactory implements Factory<CurrencyRepository> {
  private final DataModule module;

  private final Provider<CurrencyLayerApi> apiProvider;

  private final Provider<AppDatabase> appDatabaseProvider;

  public DataModule_ProvidesCurrencyRepositoryFactory(DataModule module,
      Provider<CurrencyLayerApi> apiProvider, Provider<AppDatabase> appDatabaseProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
    this.appDatabaseProvider = appDatabaseProvider;
  }

  @Override
  public CurrencyRepository get() {
    return providesCurrencyRepository(module, apiProvider.get(), appDatabaseProvider.get());
  }

  public static DataModule_ProvidesCurrencyRepositoryFactory create(DataModule module,
      Provider<CurrencyLayerApi> apiProvider, Provider<AppDatabase> appDatabaseProvider) {
    return new DataModule_ProvidesCurrencyRepositoryFactory(module, apiProvider, appDatabaseProvider);
  }

  public static CurrencyRepository providesCurrencyRepository(DataModule instance,
      CurrencyLayerApi api, AppDatabase appDatabase) {
    return Preconditions.checkNotNull(instance.providesCurrencyRepository(api, appDatabase), "Cannot return null from a non-@Nullable @Provides method");
  }
}
